<!DOCTYPE html>
<html lang="zh-Hant">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>線上刮刮樂</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            text-align: center;
            margin-top: 50px;
        }
        .scratch-card {
            width: 300px;
            height: 150px;
            margin: 0 auto;
            position: relative;
            background-color: #ddd;
            overflow: hidden;
            border-radius: 10px;
        }
        .scratch-overlay {
            width: 100%;
            height: 100%;
            background-color: silver;
            position: absolute;
            top: 0;
            left: 0;
            cursor: pointer;
        }
        .hidden-message {
            font-size: 20px;
            font-weight: bold;
            padding: 50px 10px;
            color: #000;
        }
    </style>
</head>
<body>
    <h1>線上刮刮樂</h1>
    <p>刮開銀色區域看看您的結果！</p>
    <div class="scratch-card">
        <div class="hidden-message" id="prize-message">🎉 恭喜中獎！🎉</div>
        <canvas class="scratch-overlay" id="scratch-area"></canvas>
    </div>

    <script>
        const canvas = document.getElementById("scratch-area");
        const ctx = canvas.getContext("2d");
        const message = document.getElementById("prize-message");
        const scratchCard = canvas.parentElement;

        canvas.width = scratchCard.offsetWidth;
        canvas.height = scratchCard.offsetHeight;

        // 初始化覆蓋層
        ctx.fillStyle = "silver";
        ctx.fillRect(0, 0, canvas.width, canvas.height);

        let isScratching = false;

        canvas.addEventListener("mousedown", () => (isScratching = true));
        canvas.addEventListener("mouseup", () => (isScratching = false));
        canvas.addEventListener("mousemove", (e) => {
            if (!isScratching) return;

            const rect = canvas.getBoundingClientRect();
            const x = e.clientX - rect.left;
            const y = e.clientY - rect.top;

            ctx.globalCompositeOperation = "destination-out";
            ctx.beginPath();
            ctx.arc(x, y, 20, 0, Math.PI * 2);
            ctx.fill();
        });

        // 清除一定範圍的銀色層後顯示訊息
        canvas.addEventListener("mouseup", () => {
            const imgData = ctx.getImageData(0, 0, canvas.width, canvas.height);
            let cleared = 0;

            for (let i = 0; i < imgData.data.length; i += 4) {
                if (imgData.data[i + 3] === 0) cleared++;
            }

            if (cleared / (canvas.width * canvas.height) > 0.5) {
                canvas.style.display = "none";
                alert(message.innerText);
            }
        });
    </script>
</body>
</html>

